/**
 * Autogenerated by Avro
 * <p>
 * DO NOT EDIT DIRECTLY
 */
package com.microservices.avro.model;

import lombok.AllArgsConstructor;
import lombok.Builder;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.apache.avro.AvroMissingFieldException;
import org.apache.avro.AvroRuntimeException;
import org.apache.avro.Schema;
import org.apache.avro.data.RecordBuilder;
import org.apache.avro.io.DatumReader;
import org.apache.avro.io.DatumWriter;
import org.apache.avro.io.Encoder;
import org.apache.avro.io.ResolvingDecoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.SchemaStore;
import org.apache.avro.specific.AvroGenerated;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.specific.SpecificRecord;
import org.apache.avro.specific.SpecificRecordBase;
import org.apache.avro.specific.SpecificRecordBuilderBase;

import java.io.IOException;
import java.io.ObjectInput;
import java.io.ObjectOutput;
import java.io.Serial;
import java.nio.ByteBuffer;

@Getter
@Setter
@Builder
@AvroGenerated
@NoArgsConstructor
@AllArgsConstructor
public class TwitterAvroModel extends SpecificRecordBase implements SpecificRecord {
    @Serial
    private static final long serialVersionUID = -5682541725096097095L;

    public static final Schema SCHEMA$ = new Schema.Parser().parse("""
            {
                "type": "record",
                "name": "TwitterAvroModel",
                "namespace": "com.microservices.avro.model",
                "fields": [
                    {"name": "userId", "type": "long"},
                    {"name": "id", "type": "long"},
                    {"name": "text", "type": ["null", "string"]},
                    {"name": "createdAt", "type": ["null", "long"], "logicalType": ["null", "date"]}
                ]
            }
            """
    );

    public static Schema getClassSchema() {
        return SCHEMA$;
    }

    private static final SpecificData MODEL$ = new SpecificData();

    private static final BinaryMessageEncoder<TwitterAvroModel> ENCODER = new BinaryMessageEncoder<>(MODEL$, SCHEMA$);

    private static final BinaryMessageDecoder<TwitterAvroModel> DECODER = new BinaryMessageDecoder<>(MODEL$, SCHEMA$);

    /**
     * Return the BinaryMessageEncoder instance used by this class.
     *
     * @return the message encoder used by this class
     */
    public static BinaryMessageEncoder<TwitterAvroModel> getEncoder() {
        return ENCODER;
    }

    /**
     * Return the BinaryMessageDecoder instance used by this class.
     *
     * @return the message decoder used by this class
     */
    public static BinaryMessageDecoder<TwitterAvroModel> getDecoder() {
        return DECODER;
    }

    /**
     * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
     *
     * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
     * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
     */
    public static BinaryMessageDecoder<TwitterAvroModel> createDecoder(SchemaStore resolver) {
        return new BinaryMessageDecoder<>(MODEL$, SCHEMA$, resolver);
    }

    /**
     * Serializes this TwitterAvroModel to a ByteBuffer.
     *
     * @return a buffer holding the serialized data for this instance
     * @throws java.io.IOException if this instance could not be serialized
     */
    public ByteBuffer toByteBuffer() throws IOException {
        return ENCODER.encode(this);
    }

    /**
     * Deserializes a TwitterAvroModel from a ByteBuffer.
     *
     * @param b a byte buffer holding serialized data for an instance of this class
     * @return a TwitterAvroModel instance decoded from the given buffer
     * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
     */
    public static TwitterAvroModel fromByteBuffer(ByteBuffer b) throws IOException {
        return DECODER.decode(b);
    }

    private long userId;
    private long id;
    private String text;
    private Long createdAt;

    @Override
    public SpecificData getSpecificData() {
        return MODEL$;
    }

    @Override
    public Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter.  Applications should not call.
    @Override
    public Object get(int field$) {
        return switch (field$) {
            case 0 -> userId;
            case 1 -> id;
            case 2 -> text;
            case 3 -> createdAt;
            default -> throw new IndexOutOfBoundsException("Invalid index: " + field$);
        };
    }

    // Used by DatumReader.  Applications should not call.
    @Override
    public void put(int field$, Object value$) {
        switch (field$) {
            case 0 -> userId = (Long) value$;
            case 1 -> id = (Long) value$;
            case 2 -> text = value$ != null ? value$.toString() : null;
            case 3 -> createdAt = (Long) value$;
            default -> throw new IndexOutOfBoundsException("Invalid index: " + field$);
        }
    }

    /**
     * Creates a new TwitterAvroModel RecordBuilder.
     *
     * @return A new TwitterAvroModel RecordBuilder
     */
    public static TwitterAvroModel.Builder newBuilder() {
        return new TwitterAvroModel.Builder();
    }

    /**
     * Creates a new TwitterAvroModel RecordBuilder by copying an existing Builder.
     *
     * @param other The existing builder to copy.
     * @return A new TwitterAvroModel RecordBuilder
     */
    public static TwitterAvroModel.Builder newBuilder(TwitterAvroModel.Builder other) {
        if (other == null) {
            return new TwitterAvroModel.Builder();
        } else {
            return new TwitterAvroModel.Builder(other);
        }
    }

    /**
     * Creates a new TwitterAvroModel RecordBuilder by copying an existing TwitterAvroModel instance.
     *
     * @param other The existing instance to copy.
     * @return A new TwitterAvroModel RecordBuilder
     */
    public static TwitterAvroModel.Builder newBuilder(TwitterAvroModel other) {
        if (other == null) {
            return new TwitterAvroModel.Builder();
        } else {
            return new TwitterAvroModel.Builder(other);
        }
    }

    /**
     * RecordBuilder for TwitterAvroModel instances.
     */
    @AvroGenerated
    public static class Builder extends SpecificRecordBuilderBase<TwitterAvroModel> implements RecordBuilder<TwitterAvroModel> {

        private long userId;
        private long id;
        private String text;
        private Long createdAt;

        /**
         * Creates a new Builder
         */
        private Builder() {
            super(SCHEMA$, MODEL$);
        }

        /**
         * Creates a Builder by copying an existing Builder.
         *
         * @param other The existing Builder to copy.
         */
        private Builder(TwitterAvroModel.Builder other) {
            super(other);
            isValidValue(fields()[0], other.userId);
            this.userId = data().deepCopy(fields()[0].schema(), other.userId);
            fieldSetFlags()[0] = other.fieldSetFlags()[0];
            isValidValue(fields()[1], other.id);
            this.id = data().deepCopy(fields()[1].schema(), other.id);
            fieldSetFlags()[1] = other.fieldSetFlags()[1];
            if (isValidValue(fields()[2], other.text)) {
                this.text = data().deepCopy(fields()[2].schema(), other.text);
                fieldSetFlags()[2] = other.fieldSetFlags()[2];
            }
            if (isValidValue(fields()[3], other.createdAt)) {
                this.createdAt = data().deepCopy(fields()[3].schema(), other.createdAt);
                fieldSetFlags()[3] = other.fieldSetFlags()[3];
            }
        }

        /**
         * Creates a Builder by copying an existing TwitterAvroModel instance
         *
         * @param other The existing instance to copy.
         */
        private Builder(TwitterAvroModel other) {
            super(SCHEMA$, MODEL$);
            isValidValue(fields()[0], other.userId);
            this.userId = data().deepCopy(fields()[0].schema(), other.userId);
            fieldSetFlags()[0] = true;
            isValidValue(fields()[1], other.id);
            this.id = data().deepCopy(fields()[1].schema(), other.id);
            fieldSetFlags()[1] = true;
            if (isValidValue(fields()[2], other.text)) {
                this.text = data().deepCopy(fields()[2].schema(), other.text);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.createdAt)) {
                this.createdAt = data().deepCopy(fields()[3].schema(), other.createdAt);
                fieldSetFlags()[3] = true;
            }
        }

        /**
         * Sets the value of the 'userId' field.
         *
         * @param value The value of 'userId'.
         * @return This builder.
         */
        public TwitterAvroModel.Builder setUserId(long value) {
            validate(fields()[0], value);
            this.userId = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /**
         * Checks whether the 'userId' field has been set.
         *
         * @return True if the 'userId' field has been set, false otherwise.
         */
        public boolean hasUserId() {
            return fieldSetFlags()[0];
        }

        /**
         * Clears the value of the 'userId' field.
         *
         * @return This builder.
         */
        public TwitterAvroModel.Builder clearUserId() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /**
         * Sets the value of the 'id' field.
         *
         * @param value The value of 'id'.
         * @return This builder.
         */
        public TwitterAvroModel.Builder setId(long value) {
            validate(fields()[1], value);
            this.id = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /**
         * Checks whether the 'id' field has been set.
         *
         * @return True if the 'id' field has been set, false otherwise.
         */
        public boolean hasId() {
            return fieldSetFlags()[1];
        }

        /**
         * Clears the value of the 'id' field.
         *
         * @return This builder.
         */
        public TwitterAvroModel.Builder clearId() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /**
         * Gets the value of the 'text' field.
         *
         * @return The value.
         */
        public String getText() {
            return text;
        }

        /**
         * Sets the value of the 'text' field.
         *
         * @param value The value of 'text'.
         * @return This builder.
         */
        public TwitterAvroModel.Builder setText(String value) {
            validate(fields()[2], value);
            this.text = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /**
         * Checks whether the 'text' field has been set.
         *
         * @return True if the 'text' field has been set, false otherwise.
         */
        public boolean hasText() {
            return fieldSetFlags()[2];
        }

        /**
         * Clears the value of the 'text' field.
         *
         * @return This builder.
         */
        public TwitterAvroModel.Builder clearText() {
            text = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /**
         * Gets the value of the 'createdAt' field.
         *
         * @return The value.
         */
        public Long getCreatedAt() {
            return createdAt;
        }

        /**
         * Sets the value of the 'createdAt' field.
         *
         * @param value The value of 'createdAt'.
         * @return This builder.
         */
        public TwitterAvroModel.Builder setCreatedAt(Long value) {
            validate(fields()[3], value);
            this.createdAt = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /**
         * Checks whether the 'createdAt' field has been set.
         *
         * @return True if the 'createdAt' field has been set, false otherwise.
         */
        public boolean hasCreatedAt() {
            return fieldSetFlags()[3];
        }

        /**
         * Clears the value of the 'createdAt' field.
         *
         * @return This builder.
         */
        public TwitterAvroModel.Builder clearCreatedAt() {
            createdAt = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        public TwitterAvroModel build() {
            try {
                TwitterAvroModel record = new TwitterAvroModel();
                record.userId = fieldSetFlags()[0] ? this.userId : (Long) defaultValue(fields()[0]);
                record.id = fieldSetFlags()[1] ? this.id : (Long) defaultValue(fields()[1]);
                record.text = fieldSetFlags()[2] ? this.text : (String) defaultValue(fields()[2]);
                record.createdAt = fieldSetFlags()[3] ? this.createdAt : (Long) defaultValue(fields()[3]);
                return record;
            } catch (AvroMissingFieldException ex) {
                throw ex;
            } catch (Exception ex) {
                throw new AvroRuntimeException(ex);
            }
        }
    }

    @SuppressWarnings("unchecked")
    private static final DatumWriter<TwitterAvroModel> WRITER$ = (DatumWriter<TwitterAvroModel>) MODEL$.createDatumWriter(SCHEMA$);

    @Override
    public void writeExternal(ObjectOutput out) throws IOException {
        WRITER$.write(this, SpecificData.getEncoder(out));
    }

    @SuppressWarnings("unchecked")
    private static final DatumReader<TwitterAvroModel> READER$ = (DatumReader<TwitterAvroModel>) MODEL$.createDatumReader(SCHEMA$);

    @Override
    public void readExternal(ObjectInput in) throws IOException {
        READER$.read(this, SpecificData.getDecoder(in));
    }

    @Override
    protected boolean hasCustomCoders() {
        return true;
    }

    @Override
    public void customEncode(Encoder out) throws IOException {
        out.writeLong(this.userId);

        out.writeLong(this.id);

        if (this.text == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeString(this.text);
        }

        if (this.createdAt == null) {
            out.writeIndex(0);
            out.writeNull();
        } else {
            out.writeIndex(1);
            out.writeLong(this.createdAt);
        }

    }

    @Override
    public void customDecode(ResolvingDecoder in) throws IOException {
        Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
        if (fieldOrder == null) {
            this.userId = in.readLong();

            this.id = in.readLong();

            if (in.readIndex() != 1) {
                in.readNull();
                this.text = null;
            } else {
                this.text = in.readString();
            }

            if (in.readIndex() != 1) {
                in.readNull();
                this.createdAt = null;
            } else {
                this.createdAt = in.readLong();
            }

        } else {
            for (int i = 0; i < 4; i++) {
                switch (fieldOrder[i].pos()) {
                    case 0:
                        this.userId = in.readLong();
                        break;

                    case 1:
                        this.id = in.readLong();
                        break;

                    case 2:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.text = null;
                        } else {
                            this.text = in.readString();
                        }
                        break;

                    case 3:
                        if (in.readIndex() != 1) {
                            in.readNull();
                            this.createdAt = null;
                        } else {
                            this.createdAt = in.readLong();
                        }
                        break;

                    default:
                        throw new IOException("Corrupt ResolvingDecoder.");
                }
            }
        }
    }
}